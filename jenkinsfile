pipeline {

    environment {
        RELEASE_VERSION = '1.0.2'
        registry = "eyarahmani/kaddem"
        registryCredential = 'dockerhub_id'
        dockerImage = ''
    }
    agent any
    stages {
        stage('Code retrieval') {
            steps {
                echo 'pulling...'
                checkout([$class: 'GitSCM',
                          branches: [[name: 'feat/initiation_kaddem_devops_project']],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [],
                          submoduleCfg: [],
                          userRemoteConfigs: [[url: 'https://github.com/moueffek/Devops23.git']]])
            }
        }

        stage('Clean project with Maven') {
            steps {
                sh 'mvn clean'

            }
        }

        stage('Compile project with Maven') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('MVN Sonarqube') {
            steps {
                sh "mvn sonar:sonar -Dsonar.login=squ_78935e7022d208c38ce83a2a5ae88d9baaa3ca87"
            }
        }

        stage('Test project with Maven') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Deploy project with Nexus') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }
        stage('Building our image') {
            steps {
                script {
                    dockerImage = docker.build "${registry}:${RELEASE_VERSION}"
                }
            }
        }
        stage('Deploy our image') {
            steps {
                script {
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push()
                    }
                }
            }
        }
      /*  stage('Cleaning up') {
            steps {
                sh "docker rmi $registry:$BUILD_NUMBER"
            }
        }*/
            stage('Run Docker Compose') {
                steps {
                 script {
                    sh 'docker compose pull'
                    sh 'docker compose up -d'
                    }
                }
            }

         stage('Prometheus & Grafana') {
            steps {
                script {
                   sh 'docker start prometheus'
                   sh 'docker start grafana'
                }
            }
        }
        stage('Alerts & Email Notification') {
             steps {
                 script {
             // Check for active alerts using Prometheus API
                  def alerts = sh(script: 'curl -s http://prometheus:9090/api/v1/alerts', returnStdout: true).trim()

            // Send email if there are active alerts
                    if (alerts) {
                        emailext body: "Prometheus Alerts:\n\n${alerts}", subject: 'Prometheus Alerts', to: 'zeineb.rahmani@esprit.tn'
                    } else {
                        echo 'No active alerts.'
                    }
                }
            }
        }

        stage('Email Notification') {
            steps {
                emailext body: 'Pip Went Successful ! ', subject: 'Nouveau commit sur GitHub', to: 'zeineb.rahmani@esprit.tn'
            }
        }

    }
}
